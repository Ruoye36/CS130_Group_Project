{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Auth",
      "description": "Firebase Auth Endpoints"
    },
    {
      "name": "Lib",
      "description": "Twilio Email Endpoints"
    },
    {
      "name": "Tasks",
      "description": "Task CRUD Endpoints to query Tasks Firestore Collection"
    },
    {
      "name": "User",
      "description": "User Enpoints connected to User Firestore Collection"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to sign up new user with Firebase Auth. Will throw error if username or email already has account.  Note that taskAccepted and taskCreated are initially empty lists and tasker boolean is set to false. Profile Information is also set to empty strings on registration.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "User Data to create an account",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully added user",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Error in call. Message can be \"Sorry, that email is already taken\" or \"Sorry, that username is already taken\"",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in connection"
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to sign in user with Firebase Auth. Will throw error if username of password is incorrect.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "User email and password",
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully added user",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "description": "Error in call. Message can be \"Incorrect Auth Info\" or \"Other Firebase Error\"",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in connection"
          }
        }
      }
    },
    "/api/auth/signout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to sign out user on Firebase Auth. Takes no paramters. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Succesfully Signed Out",
            "schema": {
              "$ref": "#/definitions/LoggedOutMessage"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/lib/notifyTaskTaken": {
      "post": {
        "tags": [
          "Lib"
        ],
        "description": "Endpoint to connect to Twilio and send email to tasker and customer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "EmailInfo",
            "in": "body",
            "description": "Body of Request to send two emails with Twilio",
            "schema": {
              "$ref": "#/definitions/EmailInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully added user",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/all": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get List of all Tasks in firestore collection",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an array of Task Objects",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/tutoring": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get List of all Tasks in firestore collection with categort = \"Tutoring\"",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an array of Task Objects all with category = \"Tutoring\"",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/swipes": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get List of all Tasks in firestore collection with categort = \"Swipe Trade\"",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an array of Task Objects all with category = \"Swipe Trade\"",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/rides": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get List of all Tasks in firestore collection with categort = \"Ride Share\"",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an array of Task Objects all with category = \"Ride Share\"",
            "schema": {
              "$ref": "#/definitions/TaskList"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/getTaskCounter": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Get task counter from Firestore DB entry. Task Counter is unique key for next Task to be created.",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a number task counter which is key of next task created",
            "schema": {
              "$ref": "#/definitions/TaskCounter"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/incrementTaskCounter": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Endpoint to increase taskCounter number in Firestore db by 1",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns msg of Success if task counter has been incremented",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/new": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Endpoint to create a new task. Will create a new task with current taskCounter key then increment taskCounter.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "taskInfo",
            "in": "body",
            "description": "A Task Object wihtout a key, but all other fields. Note that taskername and taskeremail are empty strings as not tasker has accepted this new task",
            "schema": {
              "$ref": "#/definitions/TaskInfoNew"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the key of the new task added to firestore task collection",
            "schema": {
              "$ref": "#/definitions/TaskCounter"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/update": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "description": "Endpoint to update an existing task using the task key. Throws error is task key is not valid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "updatedTask",
            "in": "body",
            "description": "A task object containing at least the task key. Any other fields can be ommitted if user does not want to change them.",
            "schema": {
              "$ref": "#/definitions/TaskInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a msg of Success if task as been updated on Firestore Collection",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/tasks/{key}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "description": "Endpoint to get an individual task by task key. Will throw Task with key ${key} has not been created error is key is out of bounds.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Int task key to query database with"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the given task object if found",
            "schema": {
              "$ref": "#/definitions/TaskInfo"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/user/update": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to update user info in database. Requires user email. Any other userInfo fields can be included if user wnats to update them. Explicit no update alowed of email or username.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userData",
            "in": "body",
            "description": "User Information. Email is required, all other fields are optional on update.",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success on update user in database",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/api/user/{email}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Endpoint to get all userInfo in collection from email. Can throw not found error if email not associated with any users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "String",
            "description": "User email as string in path. User db collection indexed by String email."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user info object from db if found",
            "schema": {
              "$ref": "#/definitions/UserInfo"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "Error in call"
          },
          "404": {
            "description": "Error in connection",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "TaskInfo": {
      "type": "object",
      "properties": {
        "customername": {
          "type": "string",
          "example": "String David Joe"
        },
        "customeremail": {
          "type": "string",
          "example": "String test@test.com"
        },
        "category": {
          "type": "string",
          "example": "String Tutoring"
        },
        "price": {
          "type": "string",
          "example": "String $15/hr"
        },
        "description": {
          "type": "string",
          "example": "String Need help with CS181."
        },
        "datetime": {
          "type": "string",
          "example": "String 11/09/2022 13:30"
        },
        "location": {
          "type": "string",
          "example": "String Online"
        },
        "status": {
          "type": "string",
          "example": "String Open"
        },
        "taskeremail": {
          "type": "string",
          "example": "String test1@test.com"
        },
        "taskername": {
          "type": "string",
          "example": "String bruinTasker"
        },
        "key": {
          "type": "number",
          "example": 21
        }
      }
    },
    "TaskInfoNew": {
      "type": "object",
      "properties": {
        "customername": {
          "type": "string",
          "example": "String David Joe"
        },
        "customeremail": {
          "type": "string",
          "example": "String test@test.com"
        },
        "category": {
          "type": "string",
          "example": "String Tutoring"
        },
        "price": {
          "type": "string",
          "example": "String $15/hr"
        },
        "description": {
          "type": "string",
          "example": "String Need help with CS181."
        },
        "datetime": {
          "type": "string",
          "example": "String 11/09/2022 13:30"
        },
        "location": {
          "type": "string",
          "example": "String Online"
        },
        "status": {
          "type": "string",
          "example": "String Open"
        },
        "taskeremail": {
          "type": "string",
          "example": "String empty"
        },
        "taskername": {
          "type": "string",
          "example": "String empty"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "String email"
        },
        "profileInformation": {
          "type": "object",
          "properties": {
            "bio": {
              "type": "string",
              "example": "String Bio"
            },
            "courses": {
              "type": "string",
              "example": "String Comma seprated list of courses"
            },
            "phonenumber": {
              "type": "string",
              "example": "111-111-1111"
            },
            "skills": {
              "type": "string",
              "example": "String Comma seprated list of courses"
            },
            "socialmedia": {
              "type": "string",
              "example": "String media link"
            },
            "website": {
              "type": "string",
              "example": "String website"
            }
          }
        },
        "taskAccepted": {
          "type": "string",
          "example": "Array of task keys: [1, 2, 3]"
        },
        "taskCreated": {
          "type": "string",
          "example": "Array of task keys: [1, 2, 45]"
        },
        "tasker": {
          "type": "string",
          "example": "Boolean: true or false"
        },
        "username": {
          "type": "string",
          "example": "String username"
        }
      }
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "String email"
        },
        "password": {
          "type": "string",
          "example": "String password"
        }
      }
    },
    "LoggedOutMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "logged out"
        }
      }
    },
    "TaskList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TaskInfo"
      }
    },
    "EmailInfo": {
      "type": "object",
      "properties": {
        "customeremail": {
          "type": "string",
          "example": "String devinyerasi@yahoo.com"
        },
        "customername": {
          "type": "string",
          "example": "String Hussein Customer"
        },
        "taskeremail": {
          "type": "string",
          "example": "String devinyerasi@yahoo.com"
        },
        "tasker": {
          "type": "string",
          "example": "String Hussein tasker"
        },
        "description": {
          "type": "string",
          "example": "String testing description stuff bla bla bla bnla"
        }
      }
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "example": "Success"
        }
      }
    },
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "example": "Error message in String Format"
        }
      }
    },
    "TaskCounter": {
      "type": "object",
      "properties": {
        "key": {
          "type": "number",
          "example": 53
        }
      }
    }
  }
}